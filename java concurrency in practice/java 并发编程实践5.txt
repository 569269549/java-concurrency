同步容器类
HashTable、Vector以及通过同步包装器Collections.SynchronizedXX包装起来的容器类
同步容器类是线程安全的，但是对于复合操作（迭代、跳转、条件运算等），可能需要额外的同步。
对于迭代之类的操作（特别是容器规模比较大的情况下），加锁会大大降低并发性，竞争会很激烈，所以最好拷贝一个副本进行迭代。

并发容器类
ConcurrentHashMap、CopyOnWriteArrayList、BlockingQueue等，主要用于解决同步容器并发性太低的问题。

各种Queue
ConcurrentLinkedQueue先进先出队列
PriorityQueue非并发的优先队列
BlockingQueue(LinkedBlockingQueue,ArrayBlockingQueue,PriorityBlockingQueue)拥有可阻塞的插入和获取，
常用于生产者-消费者模型。

*注意：阻塞分唤醒式(wait，notify)和循环式(自旋)，区别在于前一种cpu会空闲下来，后一种会则不会（
需要在自旋过程中加sleep之类的操作，没有空隙地自旋会把cpu跑满），生产者消费者模型一般是用前一种。
即用queue.take()从queue取东西时，若队列为空，cpu不会被调度，只有queue中放入了东西，cpu才会被通知去取。

**********

ConcurrentHashMap
采用分段锁提高并发性，即锁不同的段。
对于迭代具有弱一致性，不是fast-fail的，即不会抛出异常，可以但是不保证迭代器在构造后将容器的修改反映出来。
比如size()就只是个估值，时刻在变。

CopyOnWriteArrayList
同样迭代时不必加锁。采用的是写入时复制的方法。会保存一个指向基础数组的引用，然后创建一个副本进行修改。
如果容器规模很大，创建副本开销也比较大，适用于迭代访问数量远大于修改操作的情况。

**********

串行线程封闭
a线程安全发布一个对象，b线程获取对象并做各种修改，这个过程是线程安全的。对象池就属于这种机制。

中断interrupt
中断是非强制的，a线程中断b线程，是指a让b在运行到能够中断的地方时中断掉。前提是b线程愿意停下来。
调用interrupt会抛出interrupt exception。应对interrupt exception的方法：
1.将它传递给上一级的调用者(不捕获或者捕获再抛出)。
2.在无法抛出exception的地方，如runnable中，调用当前线程的interrupt。即Thread.currentThread().interrupt();

**********

同步工具类
包括BlockingQueue,Semaphore,Barrior,Latch等。

闭锁(Latch):阻止线程通过的一扇门。常见的有CountDownLatch，FutrueTask等。
CountDownLatch：包含一个计数器，每调用一次await计数器减一，计数为0时线程才可以通过。常见用法是主线程等待n个工作线程完成，
然后通过CountDownLatch，处理后续的事务。


